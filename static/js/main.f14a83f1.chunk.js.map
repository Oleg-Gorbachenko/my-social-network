{"version":3,"sources":["components/Navbar/Navbar.module.css","components/common/FormsControls/FormsControls.tsx","redux/dialogs-reducer.ts","utils/objects-helper.ts","redux/users-reducer.ts","assets/images/preloader.gif","components/common/Preloader/Preloader.module.css","components/Profile/Profile.module.css","api/api.ts","components/Profile/ProfileInfo/ProfileInfo.module.css","assets/images/user.jpg","reportWebVitals.ts","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.ts","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Navbar/Navbar.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","redux/app-reducer.ts","redux/redux-store.ts","App.tsx","index.tsx","components/Header/Header.module.css","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","components/common/Button/Button.tsx","components/Profile/MyPosts/Post/Post.module.css","components/common/Preloader/Preloader.tsx","components/Profile/MyPosts/MyPosts.module.css","components/Login/Login.module.css","components/common/Button/Button.module.css"],"names":["module","exports","FormControl","meta","touched","error","children","hasError","className","styles","formControl","Textarea","props","input","restProps","Input","createField","placeholder","name","validators","component","text","validate","initialState","dialogs","id","v1","messages","message","dialogsReducer","state","action","type","newMessageText","addMessage","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","FOLLOW","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","userId","followed","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","toggleIsFetching","toggleFollowingProgress","requestUsers","page","dispatch","a","usersAPI","getUsers","response","totalCount","onPageChangeThunkCreator","pageNumber","followUnfollowFlow","apiMethod","actionCreator","resultCode","follow","bind","unfollow","unfollowed","instance","axios","create","withCredentials","baseURL","headers","get","then","data","post","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","savePhoto","photo","formData","FormData","append","saveProfile","authAPI","me","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","News","Music","Settings","ProfileStatusWithHooks","useState","editMode","setEditMode","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","onDoubleClick","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","useSelector","profilePage","onSubmit","onClick","formSummaryError","Object","keys","contacts","key","ProfileInfo","isOwner","userName","fullName","Preloader","s","wrapper","mainBlock","userProfile","userPicture","src","photos","large","userPhoto","mainPhoto","alt","userSpec","target","files","initialValues","goToEditMode","Contact","contact","contactTitle","contactValue","ProfileData","descriptionBlock","Button","aboutMe","lookingForAJob","lookingForAJobDescription","ADD_POST","posts","likesCount","myPhoto","getUsersProfile","getState","authId","auth","Post","avatar","container","header","main","footer","MyPosts","memo","postsElements","p","postBlock","AddPostReduxForm","values","addPost","newPostText","maxLength10","maxLengthCreator","minLength2","minLengthCreator","formWrapper","Field","required","button","MyPostsContainer","connect","addPostAC","Profile","ProfileContainer","this","router","params","navigate","refreshProfile","prevProps","prevState","snapshot","isAuth","React","Component","compose","stopSubmit","_error","Promise","reject","location","useLocation","useNavigate","useParams","Navbar","classes","nav","item","to","navData","isActive","active","Header","loginBlock","captchaUrl","currentCaptchaValue","setAuthUserData","getAuthUserData","url","HeaderContainer","LoginReduxForm","useDispatch","length","description","initialized","rootReducer","combineReducers","dialogsPage","usersPage","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","window","DialogsContainer","lazy","UsersContainer","App","initializeApp","Suspense","fallback","path","element","AppContainer","SamuraiJSApp","ReactDOM","render","document","getElementById","maxLength","minLength","red","finalClassName","default","preloader"],"mappings":"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","file":"static/js/main.f14a83f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__17fhq\",\"item\":\"Navbar_item__Lerdi\",\"active\":\"Navbar_active__1NBPV\"};","import React from \"react\";\r\nimport {Field, WrappedFieldProps} from \"redux-form\";\r\nimport styles from \"./FormsControls.module.css\";\r\n\r\nexport const FormControl: React.FC<WrappedFieldProps> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={`${styles.formControl} ${hasError ? styles.error : ''}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}><textarea {...input}{...restProps}/></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props\r\n    return <FormControl {...props}><input {...input}{...restProps}/></FormControl>\r\n}\r\n\r\nexport const createField = (placeholder: string | null, name: string, validators:any, component: React.FC<any>, props = {}, text = '') => (\r\n    <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}/> {text}\r\n    </div>\r\n)","import {v1} from \"uuid\";\r\nimport {ActionsTypes} from \"./store\";\r\n\r\nconst ADD_MESSAGE = \"dialogs/ADD-MESSAGE\"\r\n\r\nexport type MessageType = {\r\n    id: string\r\n    message: string\r\n}\r\nexport type DialogType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        {id: v1(), name: 'Andrey'},\r\n        {id: v1(), name: 'Oleg'},\r\n        {id: v1(), name: 'Maks'},\r\n        {id: v1(), name: 'Anton'},\r\n        {id: v1(), name: 'Viktoriya'},\r\n        {id: v1(), name: 'Dmitry'}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: v1(), message: 'Hi!'},\r\n        {id: v1(), message: 'How are you!'},\r\n        {id: v1(), message: 'Yo!'},\r\n        {id: v1(), message: 'I`m fine!'}\r\n    ] as Array<MessageType>,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE: {\r\n            return state = {\r\n                ...state,\r\n                messages: [...state.messages,{id: v1(), message: action.newMessageText}]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creator\r\nexport const addMessage = (newMessageText:string) => ({type: ADD_MESSAGE,newMessageText} as const)","export const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any): any => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u\r\n    })\r\n}","import {ActionsTypes, ThunkDispatchType} from \"./store\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {updateObjectInArray} from \"../utils/objects-helper\";\r\n\r\nconst FOLLOW = \"users/FOLLOW\"\r\nconst UNFOLLOW = \"users/UNFOLLOW\"\r\nconst SET_USERS = \"users/SET_USERS\"\r\nconst SET_CURRENT_PAGE = \"users/SET_CURRENT_PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"users/SET_TOTAL_USERS_COUNT\"\r\nconst TOGGLE_IS_FETCHING = \"users/TOGGLE_IS_FETCHING\"\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"users/TOGGLE_IS_FOLLOWING_PROGRESS\"\r\n\r\nexport type UsersType = {\r\n    id: string\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\ntype PhotosType = {\r\n    small: string | undefined\r\n    large: string | undefined\r\n}\r\n\r\ntype LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\nconst initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as string[]\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport const usersReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW : {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        }\r\n        case UNFOLLOW : {\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        }\r\n        case SET_USERS: {\r\n            return {...state, users: action.users} //возвращает 4 пользователя\r\n        }\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        }\r\n        case TOGGLE_IS_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creators\r\nexport const followSuccess = (userId: string) => ({type: FOLLOW, userId} as const)\r\nexport const unfollowSuccess = (userId: string) => ({type: UNFOLLOW, userId} as const)\r\nexport const setUsers = (users: Array<UsersType>) => ({type: SET_USERS, users} as const)\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({type: SET_TOTAL_USERS_COUNT, totalUsersCount} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: string) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n} as const)\r\n\r\n//thunks\r\nexport const requestUsers = (page: number, pageSize: number) => async (dispatch: ThunkDispatchType) => {\r\n    dispatch(toggleIsFetching(true))\r\n    dispatch(setCurrentPage(page))\r\n    let response = await usersAPI.getUsers(page, pageSize)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(response.items))\r\n    dispatch(setTotalUsersCount(response.totalCount))\r\n}\r\n\r\nexport const onPageChangeThunkCreator = (pageNumber: number, pageSize: number) => async (dispatch: ThunkDispatchType) => {\r\n    dispatch(setCurrentPage(pageNumber))\r\n    dispatch(toggleIsFetching(true))\r\n    let response = await usersAPI.getUsers(pageNumber, pageSize)\r\n    dispatch(toggleIsFetching(false))\r\n    dispatch(setUsers(response.items))\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch: ThunkDispatchType, userId: string, apiMethod: any, actionCreator: any) => {\r\n    dispatch(toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId);\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: string) => async (dispatch: ThunkDispatchType) => {\r\n    followUnfollowFlow(dispatch, userId, usersAPI.followed.bind(usersAPI), followSuccess)\r\n}\r\n\r\nexport const unfollow = (userId: string) => async (dispatch: ThunkDispatchType) => {\r\n    followUnfollowFlow(dispatch, userId, usersAPI.unfollowed.bind(usersAPI), unfollowSuccess)\r\n}","module.exports = __webpack_public_path__ + \"static/media/preloader.cac6f4f6.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Preloader_wrapper__Oyctl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Profile_wrapper__24e3e\"};","import axios from \"axios\";\r\nimport {FormDataType} from \"../components/Login/Login\";\r\n\r\nconst instance = axios.create({\r\n  withCredentials: true,\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n  headers: {'API-KEY': '5b285e4d-b0fc-4ae5-ae16-e98b5fa6e386'}\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n  getUsers: (currentPage: number, pageSize: number) => {\r\n    return instance.get(`users?page=${currentPage}&count=${pageSize}`,)\r\n      .then(response => {\r\n        return response.data\r\n      })\r\n  },\r\n  followed(userId: string) {\r\n    return instance.post(`follow/${userId}`,)\r\n      .then(response => {\r\n        return response.data\r\n      })\r\n  },\r\n  unfollowed(userId: string) {\r\n    return instance.delete(`follow/${userId}`,)\r\n      .then(response => {\r\n        return response.data\r\n      })\r\n  },\r\n  getProfile(userId: string) {\r\n    console.warn('Obsolete method. Please use profileApI object.')\r\n    return profileAPI.getProfile(userId)\r\n  }\r\n}\r\n\r\nexport const profileAPI = {\r\n  getProfile(userId: string) {\r\n    return instance.get(`profile/${userId}`)\r\n  },\r\n  getStatus(userId: string) {\r\n    return instance.get(`profile/status/${userId}`)\r\n  },\r\n  updateStatus(status: string) {\r\n    return instance.put(`profile/status`, {status})\r\n  },\r\n  savePhoto(photo: File) {\r\n    let formData = new FormData();\r\n    formData.append('image', photo)\r\n    return instance.put(`profile/photo`, formData, {\r\n      headers: {'Content-Type': 'multipart / form - data'}\r\n    })\r\n  },\r\n  saveProfile(formData: FormDataType) {\r\n    return instance.put(`profile`, formData)\r\n  },\r\n}\r\n\r\nexport const authAPI = {\r\n  me() {\r\n    return instance.get(`auth/me`)\r\n  },\r\n  login(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null) {\r\n    return instance.post(`auth/login`, {email, password, rememberMe, captcha})\r\n  },\r\n  logout() {\r\n    return instance.delete(`auth/login`)\r\n  },\r\n}\r\n\r\nexport const securityAPI = {\r\n  getCaptchaUrl() {\r\n    return instance.get(`security/get-captcha-url`)\r\n  },\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ProfileInfo_wrapper__2wcRW\",\"mainBlock\":\"ProfileInfo_mainBlock__3k25X\",\"userProfile\":\"ProfileInfo_userProfile__1Mvvz\",\"userPicture\":\"ProfileInfo_userPicture__3IlkG\",\"userSpec\":\"ProfileInfo_userSpec__3msJb\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2nTKU\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1pvs_\",\"fullName\":\"ProfileInfo_fullName__1HLw6\",\"contact\":\"ProfileInfo_contact__30oj9\"};","module.exports = __webpack_public_path__ + \"static/media/user.c66e5219.jpg\";","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport classes from './News.module.css'\r\n\r\nexport const News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport classes from './Music.module.css'\r\n\r\nexport const Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport classes from './Settings.module.css'\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusProps = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusProps) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {editMode\r\n                ?\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n                :\r\n                <div>\r\n                    <b>{'My status: '}</b>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || \"Change your status\"}</span>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport {createField, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {FormDataType} from \"../../Login/Login\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport styles from \"../../common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n    const profile = useSelector<AppStateType, ProfileType>(state => state.profilePage.profile)\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <button onClick={() => {\r\n            }}>save\r\n            </button>\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>Full name: </b> {createField(\"Full name\", 'fullName', [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job: </b>\r\n                {createField('', \"lookingForAJob\", [], Input, {type: 'checkbox'})}\r\n            </div>\r\n            <div><b>My professional skills: </b></div>\r\n            {createField('My professional skills', \"lookingForAJobDescription\", [], Textarea)}\r\n            <div><b>About Me: </b>\r\n                {createField('AboutMe', \"aboutMe\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts : </b> {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key}>\r\n                    <b>{key}:{createField(key, 'contacts.' + key, [], Input)}</b>\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ProfileDataFormReduxForm = reduxForm<FormDataType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.jpg\";\r\nimport {ProfileDataFormReduxForm} from \"./ProfileDataForm\";\r\nimport {FormDataType} from \"../../Login/Login\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Button} from \"../../common/Button/Button\";\r\n\r\ntype ProfileInfoProps = {\r\n  profile: any | null\r\n  status: string\r\n  updateStatus: (status: string) => void\r\n  isOwner: boolean\r\n  savePhoto: (photo: File) => void\r\n  saveProfile: (formData: FormDataType) => any\r\n}\r\n\r\nexport const ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}: ProfileInfoProps) => {\r\n\r\n  const userName = useSelector<AppStateType, string>(state => state.profilePage.profile.fullName)\r\n  const [editMode, setEditMode] = useState(false)\r\n\r\n  if (!profile) {\r\n    return <Preloader/>\r\n  }\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files) {\r\n      savePhoto(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  const onSubmit = (formData: FormDataType) => {\r\n    saveProfile(formData)\r\n      .then(() => {\r\n        setEditMode(false)\r\n      })\r\n  }\r\n  // @ts-ignore\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <div className={s.mainBlock}>\r\n        <div className={s.userProfile}>\r\n          <div className={s.userPicture}>\r\n            <img src={profile.photos.large || userPhoto} className={s.mainPhoto} alt=\"photo\"/>\r\n          </div>\r\n        </div>\r\n        {isOwner && <div className={s.userSpec}><input type={'file'} onChange={onMainPhotoSelected}/></div>}\r\n        <h1 className={s.fullName}>{userName}</h1>\r\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n      </div>\r\n      {editMode ? <ProfileDataFormReduxForm onSubmit={onSubmit} initialValues={profile}/> :\r\n        <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>}\r\n    </div>\r\n  )\r\n}\r\n\r\ntype ContactPropsType = {\r\n  contactTitle: string\r\n  contactValue: string\r\n}\r\n\r\nexport const Contact = (props: ContactPropsType) => {\r\n  return (\r\n    <div className={s.contact}><b>{props.contactTitle}</b>: {props.contactValue}</div>\r\n  )\r\n}\r\n\r\ntype ProfileDataType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  goToEditMode: () => void\r\n}\r\n\r\nexport const ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataType) => {\r\n\r\n  return (\r\n    <div className={s.descriptionBlock}>\r\n      {isOwner && <Button onClick={goToEditMode} name={'edit'}/>}\r\n      <div><b>About Me: </b> {profile.aboutMe}</div>\r\n      <div><b>Looking for a job: </b> {profile.lookingForAJob ? 'yes' : 'no'}</div>\r\n      {profile.lookingForAJob &&\r\n        <div><b>My professional skills: </b> {profile.lookingForAJobDescription}</div>}\r\n      <div>\r\n        <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n      })}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import {v1} from \"uuid\";\r\nimport {ActionsTypes, ThunkDispatchType} from \"./store\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\nimport {FormDataType} from \"../components/Login/Login\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport userPhoto from \"../assets/images/user.jpg\";\r\n\r\nconst ADD_POST = \"profile/ADD-POST\"\r\nconst DELETE_POST = \"profile/DELETE-POST\"\r\nconst SET_USER_PROFILE = \"profile/SET_USER_PROFILE\"\r\nconst SET_STATUS = \"profile/SET_STATUS\"\r\nconst SAVE_PHOTO_SUCCESS = \"profile/SAVE_PHOTO_SUCCESS\"\r\nconst SET_MY_PHOTO = \"profile/SET_MY_PHOTO\"\r\n\r\nexport type ProfileType = {\r\n  aboutMe: string\r\n  contacts: any\r\n  lookingForAJob: boolean\r\n  lookingForAJobDescription: string\r\n  fullName: string\r\n  userId: number\r\n  photos: ProfilePhotosType\r\n}\r\n\r\nexport type ProfileContactsType = {\r\n  facebook: string\r\n  website: string\r\n  vk: string\r\n  twitter: string\r\n  instagram: string\r\n  youtube: string\r\n  github: string\r\n  mainLink: string\r\n}\r\n\r\nexport type ProfilePhotosType = {\r\n  small: string\r\n  large: string\r\n}\r\n\r\nexport type PostType = {\r\n  id: string\r\n  message: string\r\n  likesCount: number\r\n}\r\n\r\nexport type InitialStateType = {\r\n  posts: Array<PostType>\r\n  profile: ProfileType\r\n  status: string\r\n  myPhoto: string\r\n}\r\n\r\n\r\nconst initialState = {\r\n  posts: [\r\n    {id: v1(), message: 'How are you!', likesCount: 15},\r\n    {id: v1(), message: 'It\\'s my first post', likesCount: 26}\r\n  ] as Array<PostType>,\r\n  profile: {\r\n    aboutMe: '',\r\n    contacts: {} as ProfileContactsType,\r\n    lookingForAJob: false,\r\n    lookingForAJobDescription: '',\r\n    fullName: '',\r\n    userId: 1,\r\n    photos: {} as ProfilePhotosType,\r\n  },\r\n  status: '',\r\n  myPhoto: userPhoto,\r\n}\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n  switch (action.type) {\r\n    case ADD_POST: {\r\n      return {\r\n        ...state,\r\n        posts: [{id: v1(), message: action.newPostText, likesCount: 0},\r\n          ...state.posts]\r\n      }\r\n    }\r\n    case DELETE_POST: {\r\n      return {...state, posts: state.posts.filter(p => p.id !== action.id)}\r\n    }\r\n    case SET_USER_PROFILE: {\r\n      return {...state, profile: action.profile}\r\n    }\r\n    case SET_STATUS: {\r\n      return {...state, status: action.status}\r\n    }\r\n    case SAVE_PHOTO_SUCCESS: {\r\n      if (state.profile) {\r\n        return {...state, profile: {...state.profile, photos: action.photos}}\r\n      } else {\r\n        return state\r\n      }\r\n    }\r\n    case SET_MY_PHOTO: {\r\n      return {...state, myPhoto: action.photos}\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n//action creators\r\nexport const addPostAC = (newPostText: string) => ({type: ADD_POST, newPostText} as const)\r\nexport const deletePost = (id: string) => ({type: DELETE_POST, id} as const)\r\nexport const setUserProfile = (profile: ProfileType) => ({type: SET_USER_PROFILE, profile} as const)\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status} as const)\r\nexport const savePhotoSuccess = (photos: ProfilePhotosType) => ({type: SAVE_PHOTO_SUCCESS, photos} as const)\r\nexport const setMyPhoto = (photos: string) => ({type: SET_MY_PHOTO, photos} as const)\r\n\r\n//thunks\r\nexport const getUsersProfile = (userId: string) => async (dispatch: ThunkDispatchType, getState: () => AppStateType) => {\r\n  const authId = getState().auth.userId\r\n  const response = await usersAPI.getProfile(userId)\r\n  dispatch(setUserProfile(response.data))\r\n  if (authId && authId === +userId) {\r\n    dispatch(setMyPhoto(response.data.photos.large))\r\n  }\r\n}\r\n\r\nexport const getStatus = (userId: string) => async (dispatch: ThunkDispatchType) => {\r\n  const response = await profileAPI.getStatus(userId)\r\n  dispatch(setStatus(response.data))\r\n}\r\n\r\nexport const updateStatus = (status: string) => async (dispatch: ThunkDispatchType) => {\r\n  const response = await profileAPI.updateStatus(status)\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(setStatus(status))\r\n  }\r\n}\r\n\r\nexport const savePhoto = (photo: File) => async (dispatch: ThunkDispatchType) => {\r\n  const response = await profileAPI.savePhoto(photo)\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(savePhotoSuccess(response.data.data.photos))\r\n  }\r\n}\r\nexport const saveProfile = (formData: FormDataType) => async (dispatch: ThunkDispatchType, getState: AppStateType) => {\r\n  // @ts-ignore\r\n  const userId = getState().auth.userId\r\n  const response = await profileAPI.saveProfile(formData)\r\n  if (response.data.resultCode === 0) {\r\n    await dispatch(getUsersProfile(userId))\r\n  } else {\r\n    dispatch(stopSubmit('edit-profile', {_error: response.data.messages[0]}))\r\n    return Promise.reject(response.data.messages[0])\r\n  }\r\n}","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport {PostType} from \"../../../../redux/profile-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport userPhoto from \"../../../../assets/images/user.jpg\";\r\n\r\nexport const Post = (props: PostType) => {\r\n\r\n  const avatar = useSelector<AppStateType, string>(state => state.profilePage.myPhoto)\r\n  const userName = useSelector<AppStateType, string | null>(state => state.auth.login)\r\n\r\n  return (\r\n    <div className={s.container}>\r\n      <div className={s.header}>\r\n        <img className={s.avatar} src={avatar || userPhoto} alt=\"avatar\"/>\r\n        <div>{userName}</div>\r\n      </div>\r\n      <div className={s.main}>{props.message}</div>\r\n      <div className={s.footer}>\r\n        <span>Likes: </span>{props.likesCount}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, {memo} from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {MyPostsPropsType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, minLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\nimport {Button} from \"../../common/Button/Button\";\r\n\r\n\r\nexport const MyPosts = memo((props: MyPostsPropsType) => {\r\n\r\n    const postsElements = props.profilePage.posts.map(p => <Post key={p.id}\r\n                                                                 message={p.message}\r\n                                                                 likesCount={p.likesCount}\r\n                                                                 id={p.id}/>)\r\n\r\n    const addNewPost = (values: AddPostFormType) => {\r\n        props.addPost(values.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h2>My posts</h2>\r\n            <div>\r\n                <AddPostReduxForm onSubmit={addNewPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype AddPostFormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst minLength2 = minLengthCreator(2)\r\n\r\nexport const AddPostForm: React.FC<InjectedFormProps<AddPostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={s.formWrapper}>\r\n                <Field\r\n                    component={Textarea}\r\n                    name='newPostText'\r\n                    placeholder='Enter your message'\r\n                    validate={[required, maxLength10, minLength2]}/>\r\n            </div>\r\n            <div className={s.button}>\r\n                <Button name={'Add post'}/>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddPostReduxForm = reduxForm<AddPostFormType>({form: 'dialogAddMessageForm'})(AddPostForm)","import React from \"react\";\r\nimport {addPostAC, InitialStateType} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    profilePage: InitialStateType\r\n}\r\ntype MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\nimport {FormDataType} from \"../Login/Login\";\r\nimport s from './Profile.module.css'\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (formData: FormDataType) => void\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React, {ComponentType, JSXElementConstructor} from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n  getStatus,\r\n  getUsersProfile,\r\n  ProfileType,\r\n  savePhoto,\r\n  saveProfile,\r\n  updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {useLocation, useNavigate, useParams} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {FormDataType} from \"../Login/Login\";\r\n\r\ntype MapStatePropsType = {\r\n  profile: ProfileType | null\r\n  status: string\r\n  userId: number | null\r\n  isAuth: boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n  getUsersProfile: (userId: string) => void\r\n  getStatus: (userId: string) => void\r\n  updateStatus: (status: string) => void\r\n  savePhoto: (photo: File) => void\r\n  saveProfile: (formData: FormDataType) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  userId: state.auth.userId,\r\n  isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport type ProfilePropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfilePropsType> {\r\n\r\n  refreshProfile() {\r\n    // @ts-ignore\r\n    let userId = this.props.router.params.userId;\r\n    if (!userId || userId === '22956') {\r\n      this.props.getUsersProfile(userId)\r\n      //@ts-ignore\r\n      this.props.router.navigate(\"/login\")\r\n    }\r\n    this.props.getUsersProfile(userId)\r\n    this.props.getStatus(userId)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Readonly<ProfilePropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n    //@ts-ignore\r\n    if (this.props.router.params.userId != prevProps.router.params.userId) {\r\n      this.refreshProfile()\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    let isOwner;\r\n    //@ts-ignore\r\n    isOwner = this.props.isAuth && this.props.userId == this.props.router.params.userId;\r\n    return (\r\n      <Profile\r\n        {...this.props}\r\n        //@ts-ignore\r\n        isOwner={isOwner}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        updateStatus={this.props.updateStatus}\r\n        savePhoto={this.props.savePhoto}\r\n        saveProfile={this.props.saveProfile}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\n//оболочка для классовой компоненты\r\nexport const withRouter = (Component: JSXElementConstructor<any>): JSXElementConstructor<any> => {\r\n  function ComponentWithRouterProp(props: any) {\r\n    let location = useLocation();\r\n    let navigate = useNavigate();\r\n    let params = useParams();\r\n    return (\r\n      <Component\r\n        {...props}\r\n        router={{location, navigate, params}}\r\n      />\r\n    );\r\n  }\r\n\r\n  return ComponentWithRouterProp;\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, {getUsersProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n  withRouter\r\n)(ProfileContainer)\r\n","import React from \"react\";\r\nimport classes from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nexport const Navbar = () => {\r\n\r\n  const userId = useSelector<AppStateType, number | null>(state => state.auth.userId)\r\n\r\n  return (\r\n    <nav className={classes.nav}>\r\n      <div className={classes.item}>\r\n        <NavLink to={`/profile/${userId}`}\r\n                 className={navData => navData.isActive ? classes.active : classes.item}>Profile</NavLink>\r\n      </div>\r\n      <div className={`${classes.item} ${classes.active}`}>\r\n        <NavLink to={'/dialogs'}\r\n                 className={navData => navData.isActive ? classes.active : classes.item}>Messages</NavLink>\r\n      </div>\r\n      <div className={classes.item}>\r\n        <NavLink to={'/news'} className={navData => navData.isActive ? classes.active : classes.item}>News</NavLink>\r\n      </div>\r\n      <div className={classes.item}>\r\n        <NavLink to={'/music'} className={navData => navData.isActive ? classes.active : classes.item}>Music</NavLink>\r\n      </div>\r\n      <div className={classes.item}>\r\n        <NavLink to={'/users'} className={navData => navData.isActive ? classes.active : classes.item}>Users</NavLink>\r\n      </div>\r\n      <div className={classes.item}>\r\n        <NavLink to={'/settings'}\r\n                 className={navData => navData.isActive ? classes.active : classes.item}>Settings</NavLink>\r\n      </div>\r\n    </nav>\r\n  )\r\n}","import React from \"react\";\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Navbar} from \"../Navbar/Navbar\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport userPhoto from \"../../assets/images/user.jpg\";\r\n\r\ntype HeaderPropsType = {\r\n  isAuth: boolean\r\n  login: string | null\r\n  logout: () => void\r\n}\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n\r\n  const avatar = useSelector<AppStateType, string>(state => state.profilePage.myPhoto)\r\n  const fullName = useSelector<AppStateType, string | null>(state => state.auth.login)\r\n\r\n  return (\r\n    <header className={s.header}>\r\n      <div className={s.container}>\r\n        <Navbar/>\r\n        {props.isAuth\r\n          ?\r\n          <div className={s.wrapper}>\r\n            <div className={s.loginBlock}>\r\n              <img className={s.avatar} src={avatar || userPhoto} alt=\"ava\"/>\r\n              <div className={s.userName}> {fullName}</div>\r\n            </div>\r\n            <div className={s.logout} onClick={props.logout}>{'Logout'}</div>\r\n          </div>\r\n          : <NavLink to={'/Login'}>Login</NavLink>}\r\n      </div>\r\n    </header>\r\n  )\r\n}","import {ActionsTypes, ThunkDispatchType} from \"./store\";\r\nimport {authAPI, securityAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {getUsersProfile} from \"./profile-reducer\";\r\n\r\nconst SET_USER_DATA = \"auth/SET_USER_DATA\";\r\nconst GET_CAPTCHA_URL_SUCCESS = \"auth/GET_CAPTCHA_URL_SUCCESS\";\r\nconst SET_CAPTCHA_URL = \"auth/SET_CAPTCHA_URL\";\r\n\r\nexport type authType = {\r\n  userId: number\r\n  email: string\r\n  login: string\r\n}\r\n\r\nexport type initialStateType = {\r\n  userId: number | null\r\n  email: string | null\r\n  login: string | null\r\n  isAuth: boolean\r\n  captchaUrl: string | null\r\n  currentCaptchaValue: string | null\r\n}\r\n\r\nconst initialState = {\r\n  userId: null,\r\n  email: null,\r\n  login: null,\r\n  isAuth: false,\r\n  captchaUrl: null,\r\n  currentCaptchaValue: null,\r\n}\r\n\r\nexport const authReducer = (state: initialStateType = initialState, action: ActionsTypes): initialStateType => {\r\n  switch (action.type) {\r\n    case SET_USER_DATA:\r\n      return {\r\n        ...state,\r\n        ...action,\r\n        isAuth: action.isAuth\r\n      }\r\n    case GET_CAPTCHA_URL_SUCCESS:\r\n      return {\r\n        ...state, captchaUrl: action.captchaUrl\r\n      }\r\n    case SET_CAPTCHA_URL:\r\n      return {\r\n        ...state, currentCaptchaValue: action.currentCaptchaValue\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\n//action creators\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n  type: SET_USER_DATA,\r\n  userId, email, login, isAuth\r\n} as const)\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string) => ({type: GET_CAPTCHA_URL_SUCCESS, captchaUrl} as const)\r\nexport const setCaptchaUrl = (currentCaptchaValue: string) => ({type: SET_CAPTCHA_URL, currentCaptchaValue} as const)\r\n\r\n//thunks\r\nexport const getAuthUserData = () => async (dispatch: ThunkDispatchType) => {\r\n  let response = await authAPI.me()\r\n  if (response.data.resultCode === 0) {\r\n    let {id, email, login} = response.data.data\r\n    dispatch(setAuthUserData(id, email, login, true))\r\n    await dispatch(getUsersProfile(id))\r\n  }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) => async (dispatch: ThunkDispatchType, getState: () => AppStateType) => {\r\n  const captcha = getState().auth.currentCaptchaValue\r\n  let response = await authAPI.login(email, password, rememberMe, captcha)\r\n  if (response.data.resultCode === 0) {\r\n    await dispatch(getAuthUserData())\r\n  } else {\r\n    if (response.data.resultCode === 10) {\r\n      await dispatch(getCaptchaUrl())\r\n    }\r\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\r\n    dispatch(stopSubmit(\"login\", {_error: message}))\r\n  }\r\n}\r\n\r\nexport const logout = () => async (dispatch: ThunkDispatchType) => {\r\n  let response = await authAPI.logout()\r\n  if (response.data.resultCode === 0) {\r\n    dispatch(setAuthUserData(null, null, null, false))\r\n  }\r\n}\r\n\r\nexport const getCaptchaUrl = () => async (dispatch: ThunkDispatchType) => {\r\n  let response = await securityAPI.getCaptchaUrl()\r\n  dispatch(getCaptchaUrlSuccess(response.data.url))\r\n}\r\n","import React from \"react\";\r\nimport {Header} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {authType, logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nclass HeaderContainer extends React.Component<AuthPropsType, authType> {\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n}\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n})\r\n\r\ntype mapDispatchPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nexport type AuthPropsType = mapStateToPropsType & mapDispatchPropsType\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer);","import React, {ChangeEvent} from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {login, logout, setCaptchaUrl} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport styles from \"../common/FormsControls/FormsControls.module.css\";\r\nimport {Button} from \"../common/Button/Button\";\r\nimport s from './Login.module.css';\r\n\r\n\r\nexport type FormDataType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n\r\n  const dispatch = useDispatch()\r\n  const captchaUrl = useSelector<AppStateType, string | null>(state => state.auth.captchaUrl)\r\n\r\n  const InputHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    dispatch(setCaptchaUrl(e.currentTarget.value))\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      {createField('Email', 'email', [required], Input)}\r\n      {createField('Password', 'password', [required], Input, {type: 'password'})}\r\n      {createField(null, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\r\n      {captchaUrl && <img src={captchaUrl} alt=\"captcha\"/>}\r\n      {captchaUrl && <div><input type=\"text\" onChange={InputHandler} placeholder='symbols from image'/></div>}\r\n      {error && <div className={styles.formSummaryError}>\r\n        {error}\r\n      </div>}\r\n      <div className={s.button}>\r\n        <Button name={'Login'}/>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\ntype mapDispatchPropsType = {\r\n  login: (email: string, password: string, rememberMe: boolean) => void\r\n  logout: () => void\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n  isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n  isAuth: state.auth.isAuth,\r\n})\r\n\r\ntype LoginPropsType = mapStateToPropsType & mapDispatchPropsType\r\n\r\nexport const Login = (props: LoginPropsType) => {\r\n\r\n  const userId = useSelector<AppStateType, number | null>(state => state.auth.userId)\r\n\r\n  const onSubmit = (formData: FormDataType) => {\r\n    props.login(formData.email, formData.password, formData.rememberMe)\r\n  }\r\n\r\n  if (props.isAuth) {\r\n    return <Navigate to={`/profile/${userId}`}/>\r\n  }\r\n  return (\r\n    <div className={s.wrapper}>\r\n      <h1>LOGIN</h1>\r\n      <LoginReduxForm onSubmit={onSubmit}/>\r\n      <div className={s.description}>\r\n        <h3>Данные для тестового аккаунта:</h3>\r\n        <div>Email: free@samuraijs.com</div>\r\n        <div>Password: free</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, {login, logout})(Login);","import {ActionsTypes, ThunkDispatchType} from \"./store\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\nconst INITIALIZED_SUCCESS = \"app/INITIALIZED_SUCCESS\"\r\n\r\nexport type initialStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nconst initialState = {\r\n    initialized: false,\r\n}\r\n\r\nexport const appReducer = (state: initialStateType = initialState, action: ActionsTypes): initialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//action creator\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS} as const)\r\n\r\n//thunk\r\nexport const initializeApp = () => async (dispatch: ThunkDispatchType) => {\r\n    await dispatch(getAuthUserData())\r\n    dispatch(initializedSuccess())\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {usersReducer} from \"./users-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  profilePage: profileReducer,\r\n  dialogsPage: dialogsReducer,\r\n  usersPage: usersReducer,\r\n  auth: authReducer,\r\n  form: formReducer,\r\n  app: appReducer,\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n\r\n//@ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {HashRouter, Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {News} from \"./components/News/News\";\r\nimport {Music} from \"./components/Music/Music\";\r\nimport {Settings} from \"./components/Settings/Settings\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Login from \"./components/Login/Login\";\r\nimport {connect, Provider} from \"react-redux\";\r\nimport {initializeApp, initialStateType} from \"./redux/app-reducer\";\r\nimport {AppStateType, store} from \"./redux/redux-store\";\r\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\r\n\r\nconst DialogsContainer = React.lazy(() => import(\"./components/Dialogs/DialogsContainer\"));\r\nconst UsersContainer = React.lazy(() => import(\"./components/Users/UsersContainer\"));\r\n\r\nclass App extends React.Component<AppPropsType, initialStateType> {\r\n\r\n  componentDidMount() {\r\n    this.props.initializeApp();\r\n  }\r\n\r\n  render() {\r\n\r\n    if (!this.props.initialized) {\r\n      return <Preloader/>\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <HeaderContainer/>\r\n        <div className='container'>\r\n          <div className='wrapper'>\r\n            <React.Suspense fallback={<Preloader/>}>\r\n              <Routes>\r\n                <Route path='/dialogs/*' element={<DialogsContainer/>}/>\r\n                <Route path='/' element={<Navigate to='/login'/>}/>\r\n                <Route path='/profile/:userId' element={<ProfileContainer/>}/>\r\n                <Route path='/profile' element={<ProfileContainer/>}/>\r\n                <Route path='/news/*' element={<News/>}/>\r\n                <Route path='/music/*' element={<Music/>}/>\r\n                <Route path='/users/*' element={<UsersContainer/>}/>\r\n                <Route path='/settings/*' element={<Settings/>}/>\r\n                <Route path='/login/*' element={<Login/>}/>\r\n                <Route path='*' element={<div>404 NOT FOUND</div>}/>\r\n              </Routes>\r\n            </React.Suspense>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n  initializeApp: () => void\r\n}\r\n\r\ntype mapStateToPropsType = {\r\n  initialized: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n  initialized: state.app.initialized\r\n})\r\n\r\nexport type AppPropsType = mapStateToPropsType & mapDispatchPropsType\r\n\r\nlet AppContainer = connect(mapStateToProps, {initializeApp})(App);\r\n\r\nconst SamuraiJSApp = () => {\r\n  return <HashRouter>\r\n    <Provider store={store}>\r\n      <AppContainer/>\r\n    </Provider>\r\n  </HashRouter>\r\n}\r\n\r\nexport default SamuraiJSApp;","import './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport ReactDOM from \"react-dom\";\r\nimport React from \"react\";\r\nimport SamuraiJSApp from \"./App\";\r\n\r\n\r\nReactDOM.render(\r\n    <SamuraiJSApp/>, document.getElementById('root')\r\n);\r\n\r\n\r\nreportWebVitals();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1vKf1\",\"container\":\"Header_container__xIG5l\",\"wrapper\":\"Header_wrapper__3OZYt\",\"loginBlock\":\"Header_loginBlock__1hfPO\",\"avatar\":\"Header_avatar__vE94-\",\"userName\":\"Header_userName__TIc2Z\",\"logout\":\"Header_logout__1ssRS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3ggK0\",\"error\":\"FormsControls_error__2drFG\",\"formSummaryError\":\"FormsControls_formSummaryError__3SPCO\"};","export const required = (value: string | number) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: Array<number>) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\nexport const minLengthCreator = (minLength: number) => (value: Array<number>) => {\r\n    if (value.length <= minLength) return 'Need more symbols'\r\n    return undefined\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./Button.module.css\";\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n  red?: boolean\r\n  name?: string\r\n};\r\n\r\nexport const Button: React.FC<SuperButtonPropsType> = (\r\n  {\r\n    red, className,name,\r\n    ...restProps\r\n  }\r\n) => {\r\n  const finalClassName = `${s.default} ${red ? s.red : \"\"} ${className ? className : \"\"}`;\r\n\r\n  return (\r\n    <button\r\n      className={finalClassName}\r\n      {...restProps}\r\n    >{name}</button>\r\n  );\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Post_container__xXhKd\",\"header\":\"Post_header__2W4au\",\"avatar\":\"Post_avatar__1A63u\",\"main\":\"Post_main__32Ris\",\"footer\":\"Post_footer__3g4AJ\"};","import React from 'react';\r\nimport preloader from \"../../../assets/images/preloader.gif\";\r\nimport s from './Preloader.module.css'\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n      <div className={s.wrapper} >\r\n        <img  src={preloader} alt=\"Fetching\"/>\r\n      </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postBlock\":\"MyPosts_postBlock__1-3Tk\",\"posts\":\"MyPosts_posts__3HAPL\",\"formWrapper\":\"MyPosts_formWrapper__28GqI\",\"button\":\"MyPosts_button__1C0p6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"description\":\"Login_description__3iGlY\",\"button\":\"Login_button__2grPY\",\"wrapper\":\"Login_wrapper__2KcOS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__203eR\",\"red\":\"Button_red__5vBG4\"};"],"sourceRoot":""}